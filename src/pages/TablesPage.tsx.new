import { useState, useEffect } from 'react';
import { collection, query, where, getDocs, addDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../services/firebase';
import { useAuth } from '../hooks/useAuth';
import { motion } from 'framer-motion';

interface Table {
  id: string;
  label: string;
  qrUrl: string;
  createdAt: any;
}

export default function TablesPage() {
  const [tables, setTables] = useState<Table[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [newTableLabels, setNewTableLabels] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [restaurantId, setRestaurantId] = useState<string | null>(null);
  
  const { user } = useAuth();
  
  // Fetch tables for the restaurant
  useEffect(() => {
    async function fetchRestaurantId() {
      try {
        if (!user) return;
        
        // In a real app, this would come from authenticated user claims
        // For demo purposes, we'll fetch the first restaurant the user has access to
        const restaurantsRef = collection(db, 'restaurants');
        const q = query(restaurantsRef);
        const querySnapshot = await getDocs(q);
        
        if (!querySnapshot.empty) {
          const firstRestaurant = querySnapshot.docs[0];
          setRestaurantId(firstRestaurant.id);
          return firstRestaurant.id;
        }
        
        // Create a demo restaurant if none exists
        const demoRestaurant = await addDoc(collection(db, 'restaurants'), {
          name: 'Demo Restaurant',
          owner: user.uid,
          createdAt: serverTimestamp(),
          address: '123 Main St, Demo City',
          phone: '555-123-4567'
        });
        
        setRestaurantId(demoRestaurant.id);
        return demoRestaurant.id;
      } catch (err) {
        console.error('Error fetching restaurant:', err);
        setError('Failed to load restaurant data');
        return null;
      }
    }
    
    async function fetchTables(restaurantId: string) {
      try {
        const tablesRef = collection(db, 'tables');
        const q = query(tablesRef, where('restaurantId', '==', restaurantId));
        const querySnapshot = await getDocs(q);
        
        const tableData: Table[] = [];
        querySnapshot.forEach((doc) => {
          tableData.push({
            id: doc.id,
            label: doc.data().label,
            qrUrl: doc.data().qrUrl,
            createdAt: doc.data().createdAt
          });
        });
        
        setTables(tableData);
      } catch (err) {
        console.error('Error fetching tables:', err);
        setError('Failed to load tables');
      } finally {
        setLoading(false);
      }
    }
    
    async function init() {
      const restaurantId = await fetchRestaurantId();
      if (restaurantId) {
        await fetchTables(restaurantId);
      } else {
        setLoading(false);
      }
    }
    
    init();
  }, [user]);
  
  const handleGenerateQRCodes = async () => {
    try {
      if (!restaurantId) {
        setError('Restaurant ID not found');
        return;
      }
      
      if (!newTableLabels.trim()) {
        setError('Please enter at least one table label');
        return;
      }
      
      setIsGenerating(true);
      setError(null);
      
      // Parse table labels from input
      const tableLabels = newTableLabels
        .split('\n')
        .map(label => label.trim())
        .filter(label => label !== '');
      
      if (tableLabels.length === 0) {
        setError('Please enter at least one valid table label');
        setIsGenerating(false);
        return;
      }
      
      try {
        // Determine if we're in development mode
        const isDevelopment = window.location.hostname === 'localhost';
        
        // Choose the appropriate endpoint based on environment
        const endpoint = isDevelopment 
          ? 'http://localhost:5002/cravely-f2914/us-central1/generateTableQRCodesHttpMock'
          : 'https://us-central1-cravely-f2914.cloudfunctions.net/generateTableQRCodesHttp';
        
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            restaurantId,
            tableLabels
          })
        });
        
        if (!response.ok) {
          throw new Error(`Error: ${response.status} ${response.statusText}`);
        }
        
        const result = await response.json();
        
        // Handle response
        if (result.success) {
          setSuccessMessage(`Successfully generated ${Object.keys(result.tables).length} QR codes!`);
          setNewTableLabels('');
          
          if (isDevelopment) {
            // When using the mock function, manually update the tables list
            // since we're not actually adding entries to Firestore
            const now = new Date();
            const newTables = [...tables];
            
            // Add new tables from the generated QR codes
            Object.entries(result.tables).forEach(([tableId, qrUrl], index) => {
              // Get the corresponding label from tableLabels array
              const labelIndex = index % tableLabels.length;
              const label = tableLabels[labelIndex];
              
              newTables.push({
                id: tableId,
                label: label,
                qrUrl: qrUrl as string,
                createdAt: now
              });
            });
            
            setTables(newTables);
          } else {
            // In production, refresh from Firestore
            const tablesRef = collection(db, 'tables');
            const q = query(tablesRef, where('restaurantId', '==', restaurantId));
            const querySnapshot = await getDocs(q);
            
            const tableData: Table[] = [];
            querySnapshot.forEach((doc) => {
              tableData.push({
                id: doc.id,
                label: doc.data().label,
                qrUrl: doc.data().qrUrl,
                createdAt: doc.data().createdAt
              });
            });
            
            setTables(tableData);
          }
        } else {
          setError('Failed to generate QR codes');
        }
      } catch (err) {
        console.error('Error generating QR codes:', err);
        setError('An error occurred while generating QR codes');
      } finally {
        setIsGenerating(false);
      }
    } catch (error) {
      console.error('Unexpected error:', error);
      setError('An unexpected error occurred');
      setIsGenerating(false);
    }
  };
  
  // Download QR code as image
  const downloadQRCode = (qrUrl: string, tableLabel: string) => {
    const link = document.createElement('a');
    link.href = qrUrl;
    link.download = `${tableLabel.replace(/\s+/g, '-')}-QR.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="mb-8"
      >
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Table Management</h1>
        <p className="text-gray-600">Generate and manage QR codes for your restaurant tables</p>
      </motion.div>
      
      {/* Error message */}
      {error && (
        <motion.div 
          initial={{ opacity: 0, x: -10 }}
          animate={{ opacity: 1, x: 0 }}
          className="mb-6 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-sm"
        >
          <p>{error}</p>
        </motion.div>
      )}
      
      {/* Success message */}
      {successMessage && (
        <motion.div 
          initial={{ opacity: 0, x: -10 }}
          animate={{ opacity: 1, x: 0 }}
          className="mb-6 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-sm"
        >
          <p>{successMessage}</p>
        </motion.div>
      )}
      
      {/* QR Code Generator */}
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
        className="bg-white shadow rounded-lg mb-6 p-6"
      >
        <h2 className="text-lg font-medium mb-4">Generate QR Codes</h2>
        <p className="text-gray-600 mb-4">
          Enter table labels (one per line) to generate QR codes. Customers can scan these
          codes to access the ordering page for that specific table.
        </p>
        
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Table Labels (one per line)
          </label>
          <textarea
            value={newTableLabels}
            onChange={(e) => setNewTableLabels(e.target.value)}
            placeholder="Table 1&#10;Table 2&#10;Bar 1&#10;Patio 3"
            className="w-full border border-gray-300 rounded-md p-2 h-28 text-sm focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
        
        <button
          onClick={handleGenerateQRCodes}
          disabled={isGenerating || !newTableLabels.trim()}
          className="bg-blue-600 text-white rounded-md px-4 py-2 text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-blue-300 disabled:cursor-not-allowed"
        >
          {isGenerating ? (
            <span className="flex items-center">
              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Generating...
            </span>
          ) : "Generate QR Codes"}
        </button>
      </motion.div>
      
      {/* Table List */}
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="bg-white shadow rounded-lg p-6"
      >
        <h2 className="text-lg font-medium mb-4">Your Tables</h2>
        
        {loading ? (
          <div className="text-center py-8">
            <svg className="animate-spin h-8 w-8 text-blue-600 mx-auto mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p className="text-gray-600">Loading tables...</p>
          </div>
        ) : tables.length === 0 ? (
          <div className="text-center py-8 border border-dashed border-gray-300 rounded-md">
            <svg className="w-12 h-12 text-gray-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
            </svg>
            <p className="text-gray-600 mb-2">No tables created yet</p>
            <p className="text-gray-500 text-sm">Generate QR codes above to create tables</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {tables.map((table) => (
              <motion.div 
                key={table.id}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.3 }}
                className="border border-gray-200 rounded-lg overflow-hidden flex flex-col"
              >
                <div className="p-4 bg-gray-50 flex items-center justify-between border-b">
                  <h3 className="font-medium text-gray-800">{table.label}</h3>
                  <span className="text-xs bg-blue-100 text-blue-800 py-1 px-2 rounded">
                    ID: {table.id.slice(0, 6)}
                  </span>
                </div>
                
                <div className="p-4 flex-grow flex flex-col items-center justify-center">
                  {table.qrUrl ? (
                    <img 
                      src={table.qrUrl} 
                      alt={`QR Code for ${table.label}`} 
                      className="h-32 w-32 object-contain mb-2"
                    />
                  ) : (
                    <div className="h-32 w-32 bg-gray-100 flex items-center justify-center mb-2">
                      <span className="text-gray-400 text-xs text-center">QR Code not available</span>
                    </div>
                  )}
                  
                  <button
                    onClick={() => downloadQRCode(table.qrUrl, table.label)}
                    disabled={!table.qrUrl}
                    className="mt-2 text-sm text-blue-600 hover:text-blue-800 disabled:text-gray-400 disabled:cursor-not-allowed"
                  >
                    Download
                  </button>
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </motion.div>
    </div>
  );
}
